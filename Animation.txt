#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include<windows.h>
#include <GL/glut.h>
#endif
#include <math.h>

float y = -0.8f;
float speed = 0.02f;
int direction = 1;

void drawCircle(float cx, float cy, float r, int segments) {
glBegin(GL_POLYGON);
for (int i = 0; i < segments; i++) {
float theta = 2.0f * 3.1416f * i / segments;
float x = r * cosf(theta);
float y_ = r * sinf(theta);
glVertex2f(cx + x, cy + y_);
}
glEnd();
}
// Animation update function
void update(int value) {
y += direction * speed;
// Bounce logic (reverse direction)
if (y >= 0.8f) direction = -1;
if (y <= -0.8f) direction = 1;

glutPostRedisplay();
glutTimerFunc(16, update, 0); // Call update ~60 times/sec
}
// Display function
void display() {
glClear(GL_COLOR_BUFFER_BIT);
// Draw ball
glColor3f(1.0f, 0.0f, 0.0f); // Red color
drawCircle(0.0f, y, 0.1f, 100);
glFlush();
}
// Initialization
void init() {
glClearColor(1.0, 1.0, 1.0, 1.0); // White background
}
// Main function
int main(int argc, char** argv) {
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(600, 600);
glutCreateWindow("Bouncing Ball - OpenGL");
init();
glutDisplayFunc(display);
glutTimerFunc(0, update, 0);
glutMainLoop();
return 0;
}