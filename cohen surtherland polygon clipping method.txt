#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include<windows.h>
#include <GL/glut.h>
#endif

#include <iostream>

#include <stdlib.h>

// Defining region codes

const int INSIDE = 0; // 0000

const int LEFT = 1; // 0001

const int RIGHT = 2; // 0010

const int BOTTOM = 4; // 0100

const int TOP = 8; // 1000

// Defining x_max, y_max and x_min, y_min for clipping rectangle

const int x_max = 10;

const int y_max = 8;

const int x_min = 4;

const int y_min = 4;

// Function to compute region code for a point (x, y)

int computeCode(double x, double y)

{

int code = INSIDE;

if (x < x_min) // to the left of the rectangle

code |= LEFT;

else if (x > x_max) // to the right of the rectangle

code |= RIGHT;

if (y < y_min) // below the rectangle

code |= BOTTOM;

else if (y > y_max) // above the rectangle

code |= TOP;

return code;

}

// Implementing Cohen-Sutherland algorithm for clipping

bool cohenSutherlandClip(double& x1, double& y1, double& x2, double& y2)

{

// Compute region codes for P1 and P2

int code1 = computeCode(x1, y1);

int code2 = computeCode(x2, y2);

bool accept = false;

while (true) {

if ((code1 == 0) && (code2 == 0)) {

// If both endpoints lie within the rectangle

accept = true;

break;

}

else if (code1 & code2) {

// If both endpoints are outside the rectangle, in the same region

break;

}

else {

// Some segment of line lies within the rectangle

int code_out;

double x, y;

// At least one endpoint is outside the rectangle, pick it

if (code1 != 0)

code_out = code1;

else

code_out = code2;

// Find intersection point using formulas

if (code_out & TOP) {

// point is above the clip rectangle

x = x1 + (x2 - x1) * (y_max - y1) / (y2 - y1);

y = y_max;

}

else if (code_out & BOTTOM) {

// point is below the rectangle

x = x1 + (x2 - x1) * (y_min - y1) / (y2 - y1);

y = y_min;

}

else if (code_out & RIGHT) {

// point is to the right of rectangle

y = y1 + (y2 - y1) * (x_max - x1) / (x2 - x1);

x = x_max;

}

else if (code_out & LEFT) {

// point is to the left of rectangle

y = y1 + (y2 - y1) * (x_min - x1) / (x2 - x1);

x = x_min;

}

// Now intersection point x, y is found

// We replace the point outside the rectangle by the intersection point

if (code_out == code1) {

x1 = x;

y1 = y;

code1 = computeCode(x1, y1);

}

else {

x2 = x;

y2 = y;

code2 = computeCode(x2, y2);

}

}

}

return accept;

}

// Function to display the clipping rectangle and lines

void display()

{

glClear(GL_COLOR_BUFFER_BIT);

// Draw the clipping rectangle

glColor3f(1.0, 0.0, 0.0); // Red color for the rectangle

glBegin(GL_LINE_LOOP);

glVertex2f(x_min, y_min);

glVertex2f(x_max, y_min);

glVertex2f(x_max, y_max);

glVertex2f(x_min, y_max);

glEnd();

// First Line segment: P1 = (5, 5), P2 = (7, 7)

double x1 = 5, y1 = 5, x2 = 7, y2 = 7;

// Draw the original line in red (only if it is within the box)

if (cohenSutherlandClip(x1, y1, x2, y2)) {

glColor3f(1.0, 0.0, 0.0); // Red color

glBegin(GL_LINES);

glVertex2f(5, 5);

glVertex2f(7, 7);

glEnd();

}

// Now apply Cohen-Sutherland Clipping and draw the clipped part in green

if (cohenSutherlandClip(x1, y1, x2, y2)) {

glColor3f(0.0, 1.0, 0.0); // Green color for the accepted line

glBegin(GL_LINES);

glVertex2f(x1, y1);

glVertex2f(x2, y2);

glEnd();

}

// Second Line segment: P2 = (7, 9), P3 = (11, 4)

x1 = 7, y1 = 9, x2 = 11, y2 = 4;

// Draw the original line in red (only if it is within the box)

if (cohenSutherlandClip(x1, y1, x2, y2)) {

glColor3f(1.0, 0.0, 0.0); // Red color

glBegin(GL_LINES);

glVertex2f(7, 9);

glVertex2f(11, 4);

glEnd();

}

// Now apply Cohen-Sutherland Clipping and draw the clipped part in green

if (cohenSutherlandClip(x1, y1, x2, y2)) {

glColor3f(0.0, 1.0, 0.0); // Green color for the accepted line

glBegin(GL_LINES);

glVertex2f(x1, y1);

glVertex2f(x2, y2);

glEnd();

}

// Third Line segment: P3 = (1, 5), P4 = (4, 1)

x1 = 1, y1 = 5, x2 = 4, y2 = 1;

// Draw the original line in red (only if it is within the box)

if (cohenSutherlandClip(x1, y1, x2, y2)) {

glColor3f(1.0, 0.0, 0.0); // Red color

glBegin(GL_LINES);

glVertex2f(1, 5);

glVertex2f(4, 1);

glEnd();

}

// Now apply Cohen-Sutherland Clipping and draw the clipped part in green

if (cohenSutherlandClip(x1, y1, x2, y2)) {

glColor3f(0.0, 1.0, 0.0); // Green color for the accepted line

glBegin(GL_LINES);

glVertex2f(x1, y1);

glVertex2f(x2, y2);

glEnd();

}

glFlush();

}

// Function to set up the OpenGL window

void init()

{

glClearColor(1.0, 1.0, 1.0, 1.0); // White background

glMatrixMode(GL_PROJECTION);

gluOrtho2D(0.0, 15.0, 0.0, 15.0); // Set the orthographic view

}

// Main function to run the OpenGL program

int main(int argc, char** argv)

{

glutInit(&argc, argv);

glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

glutInitWindowSize(500, 500);

glutCreateWindow("Cohen-Sutherland Line Clipping");

init();

glutDisplayFunc(display);

glutMainLoop();

return 0;
}